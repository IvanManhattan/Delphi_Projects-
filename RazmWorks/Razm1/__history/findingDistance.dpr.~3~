program findingDistance;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils, Math;

type
  TArrayOfCoordinates = array[0..9, 0..1] of Integer;
  TArrayOfX = array of Integer;
  TArrayOfDistances = array of Real;

var
  q: Integer;
  arrayOfCoordinates: TArrayOfCoordinates;
  sortedArrayOfCoorfinates: TArrayOfCoordinates;
  arrayOfX: TArrayOfX;
  arrayOfDistances: TArrayOfDistances;
//  arrayOfDistances: TArrayOfDistances;
  distanceOf: Real;
  resultOf: Integer;

procedure initArray(var arrayOf: TArrayOfCoordinates);
var
  i, j: Integer;
  check: String;
  flags: Integer;
begin
  i := 0;
  j := 0;
  for i := 0 to 9 do
  begin
    for j := 0 to 1 do
    begin
       repeat
        Write('Enter the [' + intToStr(i) + ', ' + intToStr(j) + '] element]: ');
        readln(check);
        val(check, resultOf, flags);
        if (flags = 1) then
          writeln('Incorrect input')
        else
          arrayOf[i, j] := strToInt(check);
      until (flags = 0) and (resultOf > 1);;
    end;
  end;

end;

procedure printArray(const arrayOf: TArrayOfCoordinates);
var
  i, j: Integer;
begin
  i := 0;
  j := 0;
  writeln('Array of coordinates: ');
  for i := 0 to 9 do
  begin
    for j := 0 to 1 do
    begin
      write('[' + intToStr(arrayOf[i, j]) + ']');
      write('    ');
    end;
    writeln;
  end;

end;

function sortArrayByX(arrayOf: TArrayOfCoordinates): TArrayOfCoordinates;
var
  i, j, temp: Integer;
  arrayToBesorted: TArrayOfCoordinates;
begin
  arrayToBesorted := arrayOf;

  for i := Low(arrayToBesorted) to High(arrayToBesorted) - 1 do
  begin
    for j := Low(arrayToBesorted) to High(arrayToBesorted) - i - 1 do
    begin
      if arrayToBesorted[j, 0] > arrayToBesorted[j + 1, 0] then
      begin
        temp := arrayToBesorted[j, 0];
        arrayToBesorted[j, 0] := arrayToBesorted[j + 1, 0];
        arrayToBesorted[j + 1, 0] := temp;
      end;
      
    end;
      
  end;

  result := arrayToBesorted; 
  
end;

function findDistance(x1, x2, y1, y2: Integer): Real;
begin
  result := sqrt(sqr(x2 - x1) + sqr(y2 - y2));
end;

function readingDistance(const arrayOf: TArrayOfCoordinates): TArrayOfDistances;
var
  i, j, length: Integer;
  testArray, testArraySorted: TArrayOfCoordinates;
  arrayOfX: TArrayOfX;
  arrayOfDistances: TArrayOfDistances;
  distanceIs: Real;
  
begin
  i := 0;
  j := 0;
  testArray := arrayOf;
  testArraySorted := sortArrayByX(testArray);
  
//  length := testArraySorted[high(testArraySorted) - 1, 0] - testArraySorted[low(testArraySorted), 0];
  length := testArraySorted[9, 0] - testArraySorted[0, 0] + 1;
  setLength(arrayOfX, length);
  arrayOfX[0] := testArraySorted[0, 0];
  arrayOfX[High(arrayOfX)] := testArraySorted[high(testArraySorted), 0]; // !

  setLength(arrayOfDistances, length);

    
  for i := 1 to high(arrayOfX) - 1 do
  begin
    arrayOfX[i] := arrayOFx[0] + i;
  end;

  for i := 0 to High(arrayOfDistances) - 1 do
    arrayOfDistances[i] := Floor(0);

//  distanceIs := 0;

  distanceIs := findDistance(arrayOfX[i], testArray[0, 0], 0, testArray[0, 0]);
  arrayOfDistances[0] := Floor(distanceIs);


//  for i := 0 to High(arrayOfX) - 1 do
//  begin
//    findDistance(arrayOfX[i], testArray[0, 0], 0, testArray[0, 0], distanceIs);
//    arrayOfDistances[i] := distanceIs;
//  end;


  result := arrayOfDistances;  
    

end;


begin
//  initArray(arrayOfCoordinates);
//  printArray(arrayOfCoordinates);

//  sortedArrayOfCoorfinates := sortArrayByX(arrayOfCoordinates);
//  printArray(sortedArrayOfCoorfinates);

  initArray(arrayOfCoordinates);
  arrayOfDistances := readingDistance(arrayOfCoordinates);

  for q := 0 to High(arrayOfDistances) - 1 do
    write(arrayOfDistances[q]);


readln;
end.
